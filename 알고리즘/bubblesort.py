#BubbleSort T(n) = O(n^2)
'''
버블 정렬 :
이웃하는 숫자를 비교하여 작은 수를 앞쪽으로 이동시키는 과정을 반복
작은 수가 마치 거품처럼 올라오는 모양새

첫번째 정렬을 하게 될 시 무조건 가장 큰 값이 가장 바닥(마지막 인덱스)에 위치하게 됨
이말 인 즉 비교하는 비교 횟 수가 첫번째 비교의 경우 (n-1)에서 
두번째 비교의 경우 (n-2)로 세번째 비교의 경우(n-3) 줄어들게 된다.

왜냐하면 값을 비교할 때 마다 비교 당시에 가장 큰 값이 이전 정렬에서 이미 가장 바닥에 깔리고
같은 원리로 인해 그 바로 앞 인덱스에 그 다음으로 큰 숫자가 깔리게 되게 때문이다
결국 마지막 인덱스와 이웃값을 비교할 이유가 없기 때문에 굳이 연산할 필요가 없어진다.
'''

def bubblesort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i -1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]

'''
17 : 배열의 크기를 측정
18 : 배열의 크기 만큼 반복
19 : 배열의 총 크기에서 i의 값과 1을 뺀 만큼 반복 (마지막인덱스에 이미 배열에서 가장 큰 값이 있기 때문에)
20 : 현재 인덱스의 값이 다음 인덱스의 값보다 클 경우 인덱스 swap
'''


arr = [6,2,4,8,1]
bubblesort(arr)

print('정렬 결과 :', end=" ")
for i in range(len(arr)):
    print("[%d" %arr[i], end ="]")